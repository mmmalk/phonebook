{"version":3,"sources":["addform.js","shownames.js","App.js","serviceWorker.js","index.js"],"names":["Adder","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","addPerson","event","console","log","newName","preventDefault","index","state","persons","findIndex","p","name","personObject","number","newNumber","concat","onPersonChange","setState","alert","handleNewName","onNameChange","target","value","handleNewNumber","onNumberChange","bind","assertThisInitialized","react_default","a","createElement","onSubmit","onChange","type","forceUpdate","React","Component","ShowNames","onDelete","delid","url","window","confirm","axios","delete","then","response","status","onPersonDelete","_this2","map","person","key","id","onClick","App","handleNameChange","handleNumberChange","handlePersonChange","handleRefresh","get","data","_this3","_this4","post","addform_Adder","shownames_ShowNames","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ac96ffa7.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default class Adder extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state= { persons: [], newName: \"\", newNumber: \"\" }\r\n        console.log(this.state)\r\n        this.handleNewName=this.handleNewName.bind(this)\r\n        this.handleNewNumber=this.handleNewNumber.bind(this)\r\n    }\r\n    static force(){\r\n        this.forceUpdate();\r\n    }\r\n    addPerson = (event) => {\r\n        console.log(this.props.newName)\r\n        event.preventDefault() //let's not reload the page all willy-nilly \r\n        var index = this.props.state.persons.findIndex(p => p.name === this.state.newName); //check if our array contains the name already\r\n        console.log(index, index !== -1)\r\n        if (index === -1) {\r\n            const personObject = { //temporary data frame for newly added person \r\n                name: this.props.state.newName,\r\n                number: this.props.state.newNumber,\r\n                //id: this.props.state.persons.length+1 //give them numbers; drones like numbers, t. student #517788\r\n            }\r\n            //concatenate the new dataframe to list of persons\r\n            const persons = this.props.state.persons.concat(personObject)\r\n            console.log(persons)\r\n            this.props.onPersonChange(personObject)\r\n            this.setState({\r\n                //actually set the new list as current, clear var newName\r\n                persons,\r\n                newName: '',\r\n                newNumber: ''\r\n            })\r\n        }\r\n        else {\r\n            alert(\"You're trying to add existing name\")\r\n            this.setState({\r\n                newName: '',\r\n                newNumber: ''\r\n            })\r\n        }\r\n    }\r\n \r\n    handleNewName =(event) => {\r\n        //simple event handler for adding new name\r\n        //sets this.state.newName from forminput\r\n        this.props.onNameChange(event.target.value)\r\n    }\r\n\r\n    handleNewNumber = (event) => {\r\n        //simple event handler for adding new number\r\n        //sets this.state.newNumber from forminput\r\n        this.props.onNumberChange(event.target.value)\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.addPerson}>\r\n                <div>\r\n                    {/* value is tied to App's state\r\n            * onChange is tied to eventhandler that sets the variable itself\r\n            */}\r\n                    nimi: <input\r\n                        value={this.props.state.newName}\r\n                        onChange={this.handleNewName} /><br />\r\n                    numero: <input\r\n                        value={this.props.state.newNumber}\r\n                        onChange={this.handleNewNumber} />\r\n                </div>\r\n                <div>\r\n                    <button type=\"submit\">lisää</button>\r\n                </div>\r\n            </form>\r\n        )\r\n    }\r\n}","import React from 'react'\r\nimport axios from 'axios'\r\n\r\nexport default class ShowNames extends React.Component {\r\n\r\n\r\n    onDelete = (delid) =>{\r\n        var url = \"http://https://arcane-taiga-84080.herokuapp.com/api/persons/\" + delid\r\n        console.log(url)\r\n        window.confirm(\"are you sure?\")\r\n        axios\r\n        .delete(url)\r\n        .then(response => {\r\n            console.log(response.status)\r\n            this.props.onPersonDelete()\r\n        })\r\n        \r\n    }\r\n\r\n    render(){\r\n    return (\r\n        <div>\r\n            <ul>\r\n            {/*Jesus that was ugly, but then again deadline is in an hour or so */}\r\n            {this.props.persons.map(person => <li key={person.id}> {person.name} {person.number} <button onClick={() => this.onDelete(person.id)}>Delete</button></li>)}\r\n            </ul>\r\n        </div>\r\n    )\r\n    }\r\n}\r\n","import React from 'react';\nimport Adder from './addform.js';\nimport ShowNames from './shownames.js'\nimport axios from 'axios'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      persons: [],\n      newName: '',\n      newNumber: ''\n    }\n    //attach handlers\n    this.handleNameChange=this.handleNameChange.bind(this);\n    this.handleNumberChange=this.handleNumberChange.bind(this);\n    this.handlePersonChange=this.handlePersonChange.bind(this);\n    this.handleRefresh=this.handleRefresh.bind(this);\n    \n  }\n  axiosGetter() {\n\n  }\n  componentDidMount() {\n    //upon mounting get the db.json contents and set it to state\n    console.log(\"fetching .json\")\n    axios\n    .get('http://arcane-taiga-84080.herokuapp.com/api/persons')\n    .then(response => {\n      console.log(\"got data\")\n      this.setState({persons: response.data})\n      console.log(this.state)\n    })\n\n  }\n  \n  //handlers so we can sync up the state between components\n  handleNameChange(name){\n    this.setState({newName: name})\n  }\n  handleNumberChange(number){\n    this.setState({newNumber: number})\n  }\n  handleRefresh(){\n    axios\n      .get(\"http://arcane-taiga-84080.herokuapp.com/api/persons\")\n      .then(response => {\n        console.log(\"deleted something\")\n        this.setState({persons: response.data})\n        console.log(this.state.persons)\n        this.forceUpdate(); //jesus fucking christ just forceitforceitforceit\n      })\n  }\n  handlePersonChange(personObject){\n    axios\n      .post('http://arcane-taiga-84080.herokuapp.com/api/persons', personObject)\n      .then(response => {\n        console.log(response.data)\n        this.setState({\n          persons: this.state.persons.concat(response.data),\n          newName: '',\n          newNumber: ''\n        })\n      })\n  }\n\n\n    render() {\n    //returns the controls and list of people\n    return (\n      <div> \n        <h2>Puhelinluettelo</h2>\n        <Adder state={this.state} \n        onNameChange={this.handleNameChange}\n        onNumberChange={this.handleNumberChange}\n        onPersonChange={this.handlePersonChange}\n        />\n        <h2>Numerot</h2>\n        <ShowNames persons={this.state.persons}\n        onPersonDelete={this.handleRefresh}/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}